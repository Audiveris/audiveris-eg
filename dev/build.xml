<!-- +=====================================================================+ -->
<!-- |                                                                     | -->
<!-- |                         b u i l d . x m l                           | -->
<!-- |                                                                     | -->
<!-- | abstract: Emacs/ant build for Audiveris application                 | -->
<!-- | location: ${basedir}/dev/build.xml                                  | -->
<!-- | author:   herve.bitteur@audiveris.org                               | -->
<!-- |                                                                     | -->
<!-- +=====================================================================+ -->

<project name="audiveris" basedir=".." default="run">

    <description>
        Build, test, and run the Audiveris project via Emacs or Ant

        -----------------------------------------------------------------
        [INSTALLDIR]/
        build.xml                   -- Entry point for NetBeans
        dev/
            build.xml               -- Entry point for Emacs/Ant
            -prolog.xml             -- Common targets (initial part)
            -common.xml             -- Common targets (bulk part)
            utils.xml               -- Standalone utilities
                windows/                -- Windows specificities
                -windows.xml            -- Execs and installer
        -----------------------------------------------------------------
    </description>
    
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- initial definitions -->
    <import file="${basedir}/dev/-prolog.xml"/>
    
    <!-- ================================================================ -->
        
    <!-- Run classpath, to run the application from the jar file -->
    <path id="run.classpath">
        <pathelement path="${dist.jar}"/>
        <path refid="externals.classpath"/>
    </path>
        
    <!-- Build classpath, to build the application -->
    <path id="build.classpath">
        <path refid="tools.classpath"/>
        <path refid="externals.classpath"/>
    </path>
    
    <!-- Test classpath, to compile and run unit tests from class files -->
    <path id="test.classpath">
        <path refid="build.classpath"/>
        <pathelement path="${build.test.classes.dir}"/>
        <pathelement path="${build.classes.dir}"/>
    </path>
    
    <!-- =======================  Public Targets  ======================= -->

    <!-- =========== -->
    <!--  C L E A N  -->
    <!-- =========== -->
    <target name="clean"
            depends="-init, -windows.clean"
            description="Remove all the generated outputs.">

        <delete verbose="${verbose}" 
                includeEmptyDirs="true">
            <fileset dir="${build.dir}" />
            <fileset dir="${dist.dir}" />
        </delete>
        
    </target>

    <!-- =================== -->
    <!--  F U L L - D I S T  -->
    <!-- =================== -->
    <target name="full-dist"
            depends="clean, windows-execs"
            description="Build the full distribution">

        <!-- Special copy for NetBeans -->
        <copy
            verbose="${verbose}"
            todir="${basedir}">
            <fileset dir="${basedir}">
                <include name="build.xml" />
            </fileset>
            <globmapper from="build.xml" to="build-for-netbeans.xml"/>
        </copy>
        
        <!-- Generate the global zip archive -->
        <zip 
            destfile="${dist.dir}/${full.name}.${ant4hg.log.revision}-src.zip" >

            <!-- Special build.xml file for NetBeans on top dir-->
            <zipfileset dir="${basedir}" includes="build-for-netbeans.xml"/>
        
            <!-- Execs -->
            <zipfileset dir="${basedir}"
                        includes="*.bat, *.exe, *.ini"
                        excludes="${dist.excludes}"
                     />
        
            <!-- Jar file -->
            <zipfileset dir="${dist.dir}" prefix="dist"
                        includes="*.jar"
                        excludes="${dist.excludes}"
                     />

            <!-- lib jar files -->
            <zipfileset dir="${dist.dir}/lib" prefix="dist/lib"
                        includes="**"
                        excludes="${dist.excludes}"
                     />

            <!-- ocr files -->
            <zipfileset dir="${ocr.dir}" prefix="ocr"
                        includes="**"
                        excludes="${dist.excludes}"
                     />
        
            <!-- dev files -->
            <zipfileset dir="${dev.dir}" prefix="dev"
                        includes="**"
                        excludes="${dist.excludes}"
                     />
        
            <!-- res files -->
            <zipfileset dir="${res.dir}" prefix="res"
                        includes="**"
                        excludes="${dist.excludes}"
                     />
        
            <!-- eval files -->
            <zipfileset dir="${eval.dir}" prefix="eval"
                        includes="**"
                        excludes="${dist.excludes}"
                     />
        
            <!-- settings files -->
            <zipfileset dir="${settings.dir}" prefix="settings"
                        includes="**"
                        excludes="${dist.excludes}, **/run.properties"
                     />
        
            <!-- plugins files -->
            <zipfileset dir="${basedir}/plugins" prefix="plugins"
                        includes="**"
                        excludes="${dist.excludes}"
                     />
            
            <!-- Source main and test files -->
            <zipfileset dir="${basedir}/src" prefix="src"
                        includes="**"
                        excludes="${dist.excludes}"
                     />

            <!-- Examples files -->
            <zipfileset dir="${examples.dir}" prefix="examples"
                        includes="**"
                        excludes="${dist.excludes}"
                     />

            <!-- Www (+ javadoc?) files -->
            <zipfileset dir="${www.dir}" prefix="www"
                        includes="**"
                        excludes="${dist.excludes}"
                     />

            <!-- Train files -->
            <zipfileset dir="${train.dir}" prefix="train"
                        includes="**/*.xml,**/.glyphignore"
                        excludes="${dist.excludes}"
                        />
        </zip>
    </target>
    
    <!-- =============== -->
    <!--  - D O - J A R  -->
    <!-- =============== -->
    <target name="-do-jar"
            depends="-hg-tip">

        <!-- Prepare the proper string of all companion jar files -->
        <pathconvert pathsep=" " refid="externals.classpath" property="externals.string">
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>

        <!-- Define the property to use as Implementation-Version -->
        <condition
            property="hg-tip-string"
            value="${ant4hg.log.revision}:${ant4hg.log.changeset}"
            else="unknown">
            <available file="${hg.dir}"/>
        </condition>

        <!-- Put all ${build.classes.dir} into the application jar file -->
        <jar basedir="${build.classes.dir}"
             jarfile="${dist.jar}">
            <manifest>
                <attribute name="Main-Class"
                           value="${Name}"/>
                <attribute name="Class-Path"
                           value="${externals.string}"/>
                <attribute name="Built-By"
                           value="${Company}"/>
                <attribute name="Specification-Title"
                           value="${spec.title}"/>
                <attribute name="Specification-Version"
                           value="${spec.version}"/>
                <attribute name="Implementation-Version"
                           value="${hg-tip-string}"/>
            </manifest>
        </jar>
        
    </target>
    
    <!-- ======= -->
    <!--  J A R  -->
    <!-- ======= -->
    <target name="jar"
            depends="-init, -compile, -pre-jar, -copy-libs, -do-jar"
            description="Compile and generate the application jar file."/>
    
    <!-- =============== -->
    <!--  J A V A D O C  -->
    <!-- =============== -->
    <target name="javadoc"
            depends="-javadoc-build"
            description="Generate project documentation."/>
    
    <!-- ======= -->
    <!--  R U N  -->
    <!-- ======= -->
    <target name="run"
            depends="jar"
            description="Run the application from its GUI.">

        <!-- Default values -->
        <property name="run.batch" value=""/>
        <property name="run.step"  value=""/>
        <property name="run.sheet" value=""/>
        <property name="run.script" value=""/>
        
        <java
            classname="${Name}"
            classpathref="run.classpath"
            failonerror="true"
            fork="true"
            maxmemory="256m">
            
            <!-- Specific JVM arguments, if any -->
<!--                <jvmarg value="-verbose:class"/>  -->

            <!-- For JMX console (no longer needed?) -->
<!--        <sysproperty -->
<!--            key="com.sun.management.jmxremote" -->
<!--            value="true"/> -->
            
            <!-- Configuration file for logging -->
            <sysproperty
                key="java.util.logging.config.file"
                value="${settings.dir}/logging.properties"/>
            
            <!-- Application arguments -->
            <arg line="${run.batch}"/>
            <arg line="${run.step}"/>
            <arg line="${run.sheet}"/>
            <arg line="${run.script}"/>
        </java>
    </target>

    <!-- ========= -->
    <!--  T E S T  -->
    <!-- ========= -->
    <target name="test" depends="-compile-tests"
            description="Run all unit tests in batch." >

        <echo message="Performing unit tests ..."/>

        <delete verbose="${verbose}" dir="${build.test.results.dir}"/>
        <mkdir dir="${build.test.results.dir}"/>
        
        <!-- Specific pattern -->
        <property name="tests" value="*Test"/>

        <!-- Default pattern -->
        <property name="tests" value="*Test"/>
        <echo message="Unit test pattern : ${tests}"/>
        
        <junit
            printsummary="yes"
            haltonfailure="no" >
            <classpath refid="test.classpath"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>
            
            <!-- Configuration file for logging -->
            <sysproperty key="java.util.logging.config.file"
                         value="${settings.dir}/logging.properties"/>

            <batchtest
                fork="yes"
                todir="${build.test.results.dir}">
                <fileset 
                    dir="${src.test.dir}"
                    includes="**/${tests}.java"/>
            </batchtest>
        </junit>

        <echo message="Generating reports of unit tests ..."/>
        <junitreport todir="${build.test.results.dir}">
            <fileset dir="${build.test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.test.results.dir}/html"/>
        </junitreport>
        
    </target>

    <!-- =========================== -->
    <!--  W I N D O W S - E X E C S  -->
    <!-- =========================== -->
    <target name="windows-execs"
            depends="jar, -windows.execs"
            description="Build Windows executables" />

    <!-- =================================== -->
    <!--  W I N D O W S - I N S T A L L E R  -->
    <!-- =================================== -->
    <target name="windows-installer"
            depends="windows-execs, -windows.installer"
            description="Build Windows installer" />

    <!-- =============================== -->
    <!--  W I N D O W S - I N S T A L L  -->
    <!-- =============================== -->
    <target name="windows-install"
            depends="-windows.install"
            description="Install for Windows"/>
    
    <!-- =================================== -->
    <!--  W I N D O W S - U N I N S T A L L  -->
    <!-- =================================== -->
    <target name="windows-uninstall"
            depends="-windows.uninstall"
            description="Uninstall for Windows"/>

    <!-- ======================  Internal Targets  ====================== -->

    <!-- Load internal targets common to Emacs and NetBeans -->
    <import file="${dev.dir}/-common.xml"/>
    
    <!-- ================= -->
    <!--  - C O M P I L E  -->
    <!-- ================= -->
    <target name="-compile">
	<!--  description="Compile the java code." -->

        <mkdir dir="${build.classes.dir}"/>
        
        <!-- baseline classes -->
        <javac
            bootclasspath = "${env.JAVA_HOME}/jre/lib/rt.jar"
            includeantruntime = "false"
            encoding     = "${build.encoding}"
            target       = "${javac.target}"
            classpathref = "build.classpath"
            debug        = "${build.compile.debug}"
            deprecation  = "${build.compile.deprecation}"
            destdir      = "${build.classes.dir}"
            listfiles    = "${build.compile.listfiles}"
            source       = "${build.compile.source}"
            srcdir       = "${src.dir}"
        >
            <compilerarg value="-Xlint"/>  
            <compilerarg value="-Xlint:-serial"/>  
            <compilerarg value="-Xlint:-path"/>  
        </javac>
        
        <!-- plugin classes -->
        <javac
            bootclasspath = "${env.JAVA_HOME}/jre/lib/rt.jar"
            includeantruntime = "false"
            encoding     = "${build.encoding}"
            target       = "${javac.target}"
            classpathref = "build.classpath"
            debug        = "${build.compile.debug}"
            deprecation  = "${build.compile.deprecation}"
            destdir      = "${build.classes.dir}"
            listfiles    = "${build.compile.listfiles}"
            source       = "${build.compile.source}"
            srcdir       = "${plugins.dir}"
        >
            <compilerarg value="-Xlint"/> 
            <compilerarg value="-Xlint:-serial"/> 
            <compilerarg value="-Xlint:-path"/> 
        </javac>
    </target>
    
    <!-- ============================= -->
    <!--  - C O M P I L E - T E S T S  -->
    <!-- ============================= -->
    <target name="-compile-tests"
            depends="-compile">
<!--         description="Compile the unit tests." -->

        <mkdir dir="${build.test.classes.dir}"/>
        
        <javac
            bootclasspath = "${env.JAVA_HOME}/jre/lib/rt.jar"
            includeantruntime = "false"
            encoding     = "${build.encoding}"
            target       = "${javac.target}"
            classpathref = "test.classpath"
            debug        = "${build.compile.debug}"
            deprecation  = "${build.compile.deprecation}"
            destdir      = "${build.test.classes.dir}"
            listfiles    = "${build.compile.listfiles}"
            source       = "${build.compile.source}"
            srcdir       = "${src.test.dir}"
        >
            <compilerarg value="-Xlint"/>
            <compilerarg value="-Xlint:-serial"/>
            <compilerarg value="-Xlint:-path"/>
        </javac>
    </target>

    <!-- ===================== -->
    <!--  - C O P Y - L I B S  -->
    <!-- ===================== -->
    <target name="-copy-libs">
        <mkdir dir="${dist.dir}/lib"/>
        
        <copy todir="${dist.dir}/lib">
            <fileset dir="${externals.dir}"/>
        </copy>

    </target>            
</project>
