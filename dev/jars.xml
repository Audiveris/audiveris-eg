<!-- +=====================================================================+ -->
<!-- |                                                                     | -->
<!-- |                           j a r s . x m l                           | -->
<!-- |                                                                     | -->
<!-- +=====================================================================+ -->

<project name="jars" basedir="..">

    <description>
	Standalone project for handling the 'jars' folder on Kenai
    </description>
    
    <!-- Create the time stamp -->
    <tstamp/>

    <!-- Use jar definition from build.xml -->
    <import file="${basedir}/dev/build.xml"/>

    <!-- =================== -->
    <!--  F U L L - J A R S  -->
    <!-- =================== -->
    <target name="full-jars"
	    depends="-copy-jars, check-jars"
            description="Copy and check the various jars" />

    <!-- ===================== -->
    <!--  C H E C K - J A R S  -->
    <!-- ===================== -->
    <target name="check-jars"
	    depends="-read-sigs, -print-todo, -tell-ok"
            description="Check if the remote jars are up to date"/>

    <!-- ======================= -->
    <!--  - C L E A N - J A R S  -->
    <!-- ======================= -->
    <target name="-clean-jars">
<!--         description="Remove all bleeding libraries." -->
	<delete verbose="${verbose}" dir="${jars.dir}"/>
    </target>
    
    <!-- ===================== -->
    <!--  - C O P Y - J A R S  -->
    <!-- ===================== -->
    <target name="-copy-jars"
	    depends="jar, -clean-jars">
	<!-- Copy the jars distribution -->
	
        <mkdir dir="${jars.dir}"/>
        <mkdir dir="${jars.dir}/lib"/>

	<!-- Copy/rename the audiveris jar file -->
	<copy preservelastmodified="true"
	      file="${dist.jar}"
	      tofile="${jars.dir}/audiveris-latest.jar"/>

	<!-- Build the listing of lib (lib.dir) -->
	<pathconvert pathsep="${line.separator}" property="lib-dir">
	    <fileset dir="${externals.dir}">
 		<include name="*.jar"/>
 	    </fileset>
	    <chainedmapper>
		<flattenmapper/>
	    </chainedmapper>
	</pathconvert>
 	<echo file="${jars.dir}/lib.dir">${lib-dir}${line.separator}</echo>
	
	<!-- Write down the checksum of each jar file -->
	<checksum todir="${jars.dir}">
	    <fileset dir="${jars.dir}">
		<include name="*.jar"/>
	    </fileset>
	</checksum>
	<checksum todir="${jars.dir}/lib"
		  totalproperty="lib-md5">
	    <fileset dir="${externals.dir}">
		<include name="*.jar"/>
	    </fileset>
	</checksum>

	<!-- Plus the total lib checksum -->
	<echo file="${jars.dir}/lib.MD5">${lib-md5}</echo>

	<!-- The revision information -->
	<echo file="${jars.dir}/revision.txt">${ant4hg.log.revision}:${ant4hg.log.changeset}</echo>
	
    </target>

    <target name="-read-sigs">
	<delete file="${jars.dir}/todo.log"/>
	
        <for param="file">
            <path>
                <fileset dir="${jars.dir}">
		    <include name="*.MD5"/>
		    <include name="*.txt"/>
		    <include name="*.dir"/>
		</fileset>
            </path>
            <sequential>
		<antcall>
		    <param name="sig" value="@{file}"/>
		    <param name="prefix" value="http://kenai.com/downloads/audiveris/jars/"/>
		    <target name="-read-sig"/>
		    <target name="-update-jar"/>
		</antcall>
            </sequential>
        </for>
        <for param="file">
            <path>
                <fileset dir="${jars.dir}/lib"
			 includes="*.MD5"/>
            </path>
            <sequential>
		<antcall>
		    <param name="sig" value="@{file}"/>
		    <param name="prefix" value="http://kenai.com/downloads/audiveris/jars/lib/"/>
		    <target name="-read-sig"/>
		    <target name="-update-jar"/>
		</antcall>
            </sequential>
        </for>

	<condition property="todo-present">
	    <available file="${jars.dir}/todo.log"/>
	</condition>
	
	<!-- Erase the administrative .MD5.remote files -->
        <delete verbose="${verbose}">
            <fileset dir="${jars.dir}" 
                     includes="**/*.MD5.remote" 
                     />
        </delete>

    </target>

    <target name="-print-todo"
	    if="${todo-present}">
	<loadfile property="log"
		  srcFile="${jars.dir}/todo.log"/>
	<echo>Summary:${line.separator}${log}</echo>
    </target>

    <target name="-tell-ok"
	    unless="${todo-present}">
	<echo>Remote site is up to date.</echo>
    </target>
    
    <target name="-read-sig">
	<!-- Check that the file checksum matches the registered signature -->
        <pathconvert property="justName">
	    <path location="${sig}"/>
            <chainedmapper>
                <flattenmapper/>
            </chainedmapper>
        </pathconvert>
	<echo>Checking ${justName} ...</echo>
	
 	<get src="${prefix}${justName}"
 	     dest="${sig}.remote"
	     ignoreerrors="true"/>
	<loadfile property="md5"
		  srcFile="${sig}.remote">
	    <filterchain>
		<striplinebreaks/>
	    </filterchain>
	</loadfile>
	
	<condition property="unchanged">
	    <filesmatch
		textfile="true"
		file1="${sig}"
		file2="${sig}.remote"/>
	</condition>
    </target>

    <target name="-update-jar"
	    unless="unchanged">
	<!-- The archive on the remote site must be updated -->
	<echo>*** Need to update ${sig}</echo>
	<echo append="true" file="${jars.dir}/todo.log">*** Need to update ${sig}${line.separator}</echo>
    </target>
    
</project>
