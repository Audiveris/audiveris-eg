<!-- +=====================================================================+ -->
<!-- |                                                                     | -->
<!-- |                       - c o m m o n . x m l                         | -->
<!-- |                                                                     | -->
<!-- +=====================================================================+ -->

<project name="-common" basedir="..">
    
    <description>
        Subproject for targets common to NetBeans and Emacs/Ant tasks
    </description>

    <!-- Needed for ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"
	     classpathref="tools.classpath" />

    <import file="${basedir}/dev/windows/-windows.xml"/>
    
    <!-- ============================= -->
    <!--  - J A V A D O C - B U I L D  -->
    <!-- ============================= -->
    <target name="-javadoc-build"
            depends="-uml">
        <!--         description="Generate project documentation." -->
        
        <!-- Get rid of existing javadoc -->
        <delete dir="${dist.javadoc.dir}" />
        <mkdir  dir="${dist.javadoc.dir}" />

        <!-- Just in case these properties are not already set -->
        <property name="javadoc.additionalparam" value="" />
        <property name="javadoc.author"          value="true" />
        <property name="javadoc.noindex"         value="true" />
        <property name="javadoc.nonavbar"        value="false" />
        <property name="javadoc.notree"          value="true" />
        <property name="javadoc.private"         value="false" />
        <property name="javadoc.splitindex"      value="false" />
        <property name="javadoc.use"             value="false" />
        <property name="javadoc.version"         value="true" />
        <property name="javadoc.windowtitle"     value="" />
        
        <javadoc
            additionalparam ="${javadoc.additionalparam}"
            author          ="${javadoc.author}"
            bottom          ="${copyright.message}"
            destdir         ="${dist.javadoc.dir}"
            doctitle        ="${Name} ${spec.version} API"
            encoding        ="${build.encoding}"
            failonerror     ="true"
            noindex         ="${javadoc.noindex}"
            nonavbar        ="${javadoc.nonavbar}"
            notree          ="${javadoc.notree}"
            overview        ="${javadoc.overview}"
            package         ="yes"
            packagenames    ="${javadoc.packages}"
            private         ="${javadoc.private}"
            source          ="${javac.source}"
            sourcepath      ="${src.dir}"
            splitindex      ="${javadoc.splitindex}"
            use             ="${javadoc.use}"
            useexternalfile ="true"
            version         ="${javadoc.version}"
            windowtitle     ="${javadoc.windowtitle}"
            >
            
            <classpath>
                <path path="${javac.classpath}"/>
		<path refid="build.classpath"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>

            <!-- Which Java files to process -->
            <source file="${src.dir}/Audiveris.java"/>
            <packageset dir="${src.dir}" includes="*/**"/>

            <!-- Define a logical grouping of packages -->
             <group packages="omr:omr.sheet:omr.grid:omr.score:omr.score.common:omr.score.entity:omr.score.midi:omr.score.visitor:omr.glyph:omr.glyph.facets:omr.glyph.pattern:omr.glyph.text:omr.glyph.text.tesseract:omr.step:omr.script"
                 title="Driving Packages"/>
             <group packages="omr.action:omr.glyph.ui:omr.lag.ui:omr.ui:omr.ui.*:omr.glyph.ui.*:omr.plugin:omr.score.ui:omr.sheet.ui"
                 title="User interface Packages"/>
             <group packages="omr.run:omr.graph:omr.lag*:omr.stick*:omr.sheet.picture"
                 title="Geometry Packages"/>
             <group packages="omr.check:omr.constant:omr.log:omr.math:omr.selection:omr.util"
                 title="Utility Packages"/>
        </javadoc>

    </target>

    <!-- ================= -->
    <!--  - P R E - J A R  -->
    <!-- ================= -->
    <target name="-pre-jar">

        <!-- Copy resource properties to classes -->
        <copy todir="${build.classes.dir}" verbose="$verbose">
            <fileset dir="${src.dir}" includes="**/*.properties"/>
            <fileset dir="${plugins.dir}" includes="**/*.properties"/>
        </copy>

        <!-- Copy icon files into the classes dir -->
        <copy
            verbose="${verbose}"
            todir="${build.classes.dir}">
            <fileset dir="${src.dir}"
                     includes="**/icon*.png"/>
        </copy>

        <!-- Purge build/classes folder from documentation items -->
        <delete
            verbose="${verbose}"
            includeEmptyDirs="true">
            <fileset dir="${build.classes.dir}" 
                     includes="**/*.html,**/doc-files/*,**/doc-files" 
                     />
        </delete>

    </target>

    <!-- ========= -->
    <!--  - U M L  -->
    <!-- ========= -->
    <target name="-uml">
	<!-- Generation of UML drawings with Umlet utility -->
        
        <for param="file">
            <path>
                <fileset dir="${src.dir}" includes="**/*.uxf">
                    <depend targetdir="${src.dir}">
                        <mapper type="glob" from="*.uxf" to="*.jpg"/>
                    </depend>
                </fileset>
                <fileset dir="${material.dir}" includes="**/*.uxf">
                    <depend targetdir="${src.dir}">
                        <mapper type="glob" from="*.uxf" to="*.jpg"/>
                    </depend>
                </fileset>
            </path>
            <sequential>
                <for list="jpg,pdf" param="format">
                    <sequential>
                        <echo>Umlet format=@{format} file=@{file}</echo>
                        <java
                            fork="true"
			    classname="com.baselet.control.Main"
			    classpathref="tools.classpath">
 			    <arg value="-action=convert" />
                            <arg value="-format=@{format}" />
                            <arg value="-filename=@{file}" />
                        </java>
                    </sequential>
                </for>
            </sequential>
        </for>
        
    </target>

    <!-- =============== -->
    <!--  - H G - T I P  -->
    <!-- =============== -->
    <target name="-hg-tip"
            if="${hg.present}">
	<!-- description="Retrieve Hg tip revision" -->
        
        <taskdef name="hg"
                 classpathref="tools.classpath"
                 classname="net.sourceforge.ant4hg.taskdefs.HgTask"/>           
        
        <hg cmd="log" dir="${basedir}">
            <arg value="-rtip"/>
        </hg>
<!--         <echo message="==========================" />
         <echo message="revision=${ant4hg.log.revision}" />
         <echo message="changeset=${ant4hg.log.changeset}" />
         <echo message="tag=${ant4hg.log.tag}" />
         <echo message="user=${ant4hg.log.user}" />
         <echo message="date=${ant4hg.log.date}" />
         <echo message="summary=${ant4hg.log.summary}" />-->

    </target>

</project>
