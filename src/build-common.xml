<!-- +=====================================================================+ -->
<!-- |                                                                     | -->
<!-- |                  b u i l d - c o m m o n . x m l                    | -->
<!-- |                                                                     | -->
<!-- | abstract: ant build for Audiveris application                       | -->
<!-- | location: ${basedir}/src/build-common.xml                           | -->
<!-- | author:   herve.bitteur@laposte.net                                 | -->
<!-- |                                                                     | -->
<!-- +=====================================================================+ -->

<project name="common" basedir="..">
    
    <description>
	This project gathers all the targets that are common to NetBeans and
	Emacs / Ant building tasks
    </description>

    <!-- Needed for ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
	<classpath>
	    <pathelement location="${ant-contrib.jar}"/>
	</classpath>
    </taskdef>
    
    <!-- Jalopy task definition -->
    <taskdef name="jalopy"
	     classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
	<classpath>
	    <fileset dir="${jalopy.dir}" includes="*.jar" />
	</classpath>
    </taskdef>
    
    <!-- =================== -->
    <!--  - B I N - D I S T  -->
    <!-- =================== -->
    <target name="-bin-dist"
	    depends="-launcher">
<!--         description="Build the binary needed for a release." -->

        <mkdir dir="${dist.dir}"/>
	
        <!-- Generate the release zip archive -->
        <zip 
            destfile="${dist.dir}/${full.name}-bin-${DSTAMP}.zip" >
        
            <!-- Launcher -->
            <zipfileset dir="${dist.dir}" prefix="dist"
                     includes="*.bat"
                     excludes="${dist.excludes}"
                     />
        
            <!-- Jar file -->
            <zipfileset dir="${dist.dir}" prefix="dist"
                     includes="*.jar"
                     excludes="${dist.excludes}"
                     />

            <!-- lib jar files -->
            <zipfileset dir="${dist.dir}/lib" prefix="dist/lib"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- ocr files -->
            <zipfileset dir="${ocr.dir}" prefix="ocr"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Examples files -->
            <zipfileset dir="${examples.dir}" prefix="examples"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Www files (w/o javadoc) -->
            <zipfileset dir="${www.dir}" prefix="www"
                     includes="**"
                     excludes="${dist.excludes},**/api/**"
                     />
	</zip>
    </target>
    
    <!-- ===================== -->
    <!--  - F U L L - D I S T  -->
    <!-- ===================== -->
    <target name="-full-dist"
	    depends="-launcher">
<!--         description="Build the whole release distribution." -->

	<!-- Special copy for NetBeans -->
        <copy
            verbose="${verbose}"
            todir="${basedir}">
	    <fileset dir="${basedir}">
		<include name="build.xml" />
	    </fileset>
	    <globmapper from="build.xml" to="build-for-netbeans.xml"/>
        </copy>
	
        <!-- Generate the global zip archive -->
        <zip 
            destfile="${dist.dir}/${full.name}-full-${DSTAMP}.zip" >

            <!-- Special build.xml file for NetBeans on top dir-->
	    <zipfileset dir="${basedir}" includes="build-for-netbeans.xml"/>
        
            <!-- Launcher -->
            <zipfileset dir="${dist.dir}" prefix="dist"
                     includes="*.bat"
                     excludes="${dist.excludes}"
                     />
        
            <!-- Jar file -->
            <zipfileset dir="${dist.dir}" prefix="dist"
                     includes="*.jar"
                     excludes="${dist.excludes}"
                     />

            <!-- lib jar files -->
            <zipfileset dir="${dist.dir}/lib" prefix="dist/lib"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- ocr files -->
            <zipfileset dir="${ocr.dir}" prefix="ocr"
                     includes="**"
                     excludes="${dist.excludes}"
                     />
        
            <!-- config files -->
            <zipfileset dir="${config.dir}" prefix="config"
                     includes="**"
                     excludes="${dist.excludes}"
                     />
            
            <!-- Source main and test files -->
            <zipfileset dir="${basedir}/src" prefix="src"
                     includes="**"
                     excludes="${dist.excludes}"
                     />
            
            <!-- Icons -->
            <zipfileset dir="${basedir}/icons" prefix="icons"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Examples files -->
            <zipfileset dir="${examples.dir}" prefix="examples"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Www + javadoc files -->
            <zipfileset dir="${www.dir}" prefix="www"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Sheet Train files -->
            <zipfileset dir="${sheets.dir}" prefix="train/sheets"
			includes="**/*.xml"
			excludes="${dist.excludes}"
			/>

	</zip>
    </target>

    <!-- =========== -->
    <!--  - I N I T  -->
    <!-- =========== -->
    <target name="-init">
<!--         description="Initialize the environment." -->

        <!-- Create the time stamp -->
        <tstamp/>

        <available
            property="junit.jar.present"
            file="${junit.jar}"
	    />

    </target>
    
    <!-- ============================= -->
    <!--  - J A V A D O C - B U I L D  -->
    <!-- ============================= -->
    <target name="-javadoc-build"
            depends="uml">
        <!--         description="Generate project documentation." -->
        
<!--         <echo>DEBUG build-common -javadoc-build</echo> -->

        <!-- Get rid of existing html files -->
        <!-- without deleting the directory (to keep CVS admin files) -->
        <mkdir dir="${dist.javadoc.dir}" />
        <delete verbose="${verbose}">
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </delete>

        <!-- Just in case these properties are not already set -->
        <property name="javadoc.additionalparam" value="" />
        <property name="javadoc.author"          value="true" />
        <property name="javadoc.noindex"         value="false" />
        <property name="javadoc.nonavbar"        value="false" />
        <property name="javadoc.notree"          value="false" />
        <property name="javadoc.private"         value="false" />
        <property name="javadoc.splitindex"      value="true" />
        <property name="javadoc.use"             value="true" />
        <property name="javadoc.version"         value="true" />
        <property name="javadoc.windowtitle"     value="" />
        
        <javadoc
            additionalparam ="${javadoc.additionalparam}"
            author          ="${javadoc.author}"
            bottom          ="${copyright.message}"
            destdir         ="${dist.javadoc.dir}"
            doctitle        ="${Name} ${spec.version} API"
            encoding        ="${build.encoding}"
            failonerror     ="true"
            noindex         ="${javadoc.noindex}"
            nonavbar        ="${javadoc.nonavbar}"
            notree          ="${javadoc.notree}"
            overview        ="${javadoc.overview}"
            package         ="yes"
            packagenames    ="${javadoc.packages}"
            private         ="${javadoc.private}"
            source          ="${javac.source}"
            sourcepath      ="${src.dir};${swingappfwk.src};${eventbus.src}"
            splitindex      ="${javadoc.splitindex}"
            use             ="${javadoc.use}"
            useexternalfile ="true"
            version         ="${javadoc.version}"
            windowtitle     ="${javadoc.windowtitle}"
            >
            
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>

            <!-- Which Java files to process -->
            <source file="${src.dir}/Audiveris.java"/>
            <packageset dir="${src.dir}" includes="*/**"/>

            <!-- Define a logical grouping of packages -->
             <group packages="omr:omr.sheet:omr.score:omr.score.common:omr.score.entity:omr.score.midi:omr.score.visitor:omr.glyph:omr.glyph.text:omr.glyph.text.tesseract:omr.step:omr.script"
                 title="Driving Packages"/>
             <group packages="omr.action:omr.glyph.ui:omr.lag.ui:omr.ui:omr.ui.*:omr.glyph.ui.*:omr.plugin:omr.score.ui:omr.sheet.ui"
                 title="User interface Packages"/>
             <group packages="omr.graph:omr.lag*:omr.stick*:omr.sheet.picture"
                 title="Geometry Packages"/>
             <group packages="omr.check:omr.constant:omr.log:omr.math:omr.selection:omr.util"
                 title="Utility Packages"/>
        </javadoc>

    </target>
    
    <!-- =================== -->
    <!--  - L A U N C H E R  -->
    <!-- =================== -->
    <target name="-launcher"
	    depends="-init">
<!-- 	    description="Generate the launcher script." -->

        <mkdir dir="${dist.dir}"/>

        <!-- .bat file for windows -->
        <echo file="${dist.dir}/${name}.bat" append="false">@ECHO OFF
REM ${name}.bat
java -Xmx256M -jar ${full.name}.jar
        </echo>
        
    </target>

    <!-- =========================== -->
    <!--  - P O S T - J A V A D O C  -->
    <!-- =========================== -->
    <target name="-post-javadoc">

        <!-- Remove time stamp in javadoc files, to ease CVS handling -->
        <!--
        <echo message="Removing time stamps ..." />
        -->
	<!-- Get rid of Generated by javadoc (build 1.6.0) on Wed Jul 11 07:52:22 CEST 2007 -->
        <!--
        <replaceregexp replace="- Generated by javadoc -"
                       match="- Generated by javadoc .*-" >
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </replaceregexp>
        -->

	<!-- Get rid of	<META NAME="date" CONTENT="2007-07-10"> -->
        <!--
        <replaceregexp replace=""
                       match='&lt;META NAME="date" CONTENT=.*&gt;' >
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </replaceregexp>
        -->

        
        <!-- Slightly modify java CVS tag, so as not to be used as html CVS tag -->
        <!-- Nota: We cannot directly use a litteral regexp, since
             this very file is also handled by CVS, hence the dynamic
             value building of the regexp as property m.all !!!  -->
             <!--
        <echo message="Trimming Java CVS tags ..." />
        <property name="m.dollar" value="\$"/>
        <property name="m.id" value="Id:"/>
        <property name="m.all" value="${m.dollar}${m.id} (.*) ${m.dollar}"/>
        <replaceregexp replace="\1"
                       match="${m.all}" >
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </replaceregexp>
        -->
	        
    </target>

    <!-- ===================================== -->
    <!--  - P O S T - P O S T - J A V A D O C  -->
    <!-- ===================================== -->
    <target name="-post-post-javadoc">
        <!-- Copy all doc files where NetBeans expects them to be -->

        <mkdir dir="${nb.javadoc.dir}"/>
        
        <copy
            verbose="${verbose}"
            todir="${nb.javadoc.dir}">
            <fileset dir="${dist.javadoc.dir}"  
                     excludes="**/CVS/*"/>
        </copy>
        
    </target>

    <!-- ================= -->
    <!--  - P R E - J A R  -->
    <!-- ================= -->
    <target name="-pre-jar">

<!--         <echo>DEBUG build-common -pre-jar</echo> -->

        <!-- Prepare a (half) manifest -->
        <tstamp/>
	<property name="manifest.file" value="manifest.mf" />
        <echo file="${manifest.file}" append="false">Manifest-Version: 1.0
Built-By: ${build.owner}
Specification-Title: ${spec.title}
Specification-Version: ${spec.version}
Implementation-Version: ${impl.version} ${DSTAMP}
</echo>
	<!-- Copy config files into a config folder in the classes dir -->
	<mkdir dir="${build.classes.dir}/config" />
        <copy
            verbose="${verbose}"
            todir="${build.classes.dir}/config">
            <fileset dir="${config.dir}"
                     includes="*"/>
        </copy>

	<!-- Copy icons files into an icons folder in the classes dir -->
	<mkdir dir="${build.classes.dir}/icons" />
        <copy
            verbose="${verbose}"
            todir="${build.classes.dir}/icons">
            <fileset dir="${icons.dir}"
                     includes="*.xml"/>
        </copy>

	<!-- Purge build/classes folder from documentation items -->
        <delete
	    verbose="${verbose}"
	    includeEmptyDirs="true">
            <fileset dir="${build.classes.dir}" 
                     includes="**/*.html,**/doc-files/*,**/doc-files" 
                     />
        </delete>

    </target>

    <!-- ======= -->
    <!--  U M L  -->
    <!-- ======= -->
    <target name="uml"
	    description="Generation of UML drawings with Umlet utility">
	
	<for param="file">
	    <path>
		<fileset dir="${src.dir}" includes="**/*.uxf">
		    <depend targetdir="${src.dir}">
			<mapper type="glob" from="*.uxf" to="*.jpg"/>
		    </depend>
		</fileset>
	    </path>
	    <sequential>
		<for list="jpg,pdf" param="format">
		    <sequential>
			<echo>Umlet format=@{format} file=@{file}</echo>
			<java
			    fork="true"
			    dir="${umlet.dir}"
			    jar="${umlet.jar}">
			    <arg value="-action=convert" />
			    <arg value="-format=@{format}" />
			    <arg value="-filename=@{file}" />
			</java>
		    </sequential>
		</for>
	    </sequential>
	</for>
	
    </target>


    <import file="${dev.dir}/build-utils.xml"/>


    <!--
    <import file="${dev.dir}/build-onejar.xml"/>
    -->
    
</project>
