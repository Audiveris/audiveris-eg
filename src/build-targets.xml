<!-- +=====================================================================+ -->
<!-- |                                                                     | -->
<!-- |                 b u i l d - t a r g e t s . x m l                   | -->
<!-- |                                                                     | -->
<!-- | abstract: ant build for Audiveris application                       | -->
<!-- | location: ${basedir}/src/build-targets.xml                          | -->
<!-- | author:   herve.bitteur@laposte.net                                 | -->
<!-- |                                                                     | -->
<!-- +=====================================================================+ -->

<project name="audiveris-targets" basedir="..">
    
    <description>
	This project gathers all the targets that are common to NetBeans and
	Emacs building tasks
    </description>
    
    <!-- JAXB Java-to-Schema task definition -->
    <taskdef name="schemagen"
	     classname="com.sun.tools.jxc.SchemaGenTask">
	<classpath>
	    <fileset dir="${jaxb.dir}/lib" includes="*.jar" />
	</classpath>
    </taskdef>
    
    <!-- JAXB Schema-to-Java task definition -->
    <taskdef name="xjc"
	     classname="com.sun.tools.xjc.XJCTask">
	<classpath>
	    <fileset dir="${jaxb.dir}/lib" includes="*.jar" />
	</classpath>
    </taskdef>
    
    <!-- Jalopy task definition -->
    <taskdef name="jalopy"
	     classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
	<classpath>
	    <fileset dir="${jalopy.dir}" includes="*.jar" />
	</classpath>
    </taskdef>
    
    <!-- ========================= -->
    <!--  - B U I L D - I C O N S  -->
    <!-- ========================= -->
    <target name="-build-icons">
        <!-- Make a separate archive for icons -->
        <jar basedir="${basedir}"
	     destfile="${icons.dir}/music_icons.jar"
	     includes="icons/*.xml"
	     compress="true"
	     />
    </target>
    
    <!-- ========================= -->
    <!--  - C L E A N - I C O N S  -->
    <!-- ========================= -->
    <target name="-clean-icons">
<!--         description="Remove the icons archive." -->
	<delete verbose="${verbose}" file="${icons.music.jar}"/>
    </target>
    
    <!-- =========== -->
    <!--  - D I S T  -->
    <!-- =========== -->
    <target name="-dist"
            description="Rebuild and package the whole distribution.">

        <mkdir dir="${dist.dir}"/>

        <!-- Generate the global zip archive -->
        <zip 
            destfile="${dist.dir}/${full.name}-${DSTAMP}.zip" >

            <!-- Special build.xml file for NetBeans on top dir-->
	    <zipfileset dir="${basedir}" includes="build.xml" fullpath="build-for-netbeans.xml"/>
        
            <!-- Bin files -->
            <zipfileset dir="${bin.dir}" prefix="bin"
                     includes="**"
                     excludes="${dist.excludes}"
                     />
        
            <!-- Jar file -->
            <zipfileset dir="${dist.dir}" prefix="bin"
                     includes="*.jar"
                     excludes="${dist.excludes}"
                     />
        
            <!-- lib jar files -->
            <zipfileset dir="${dist.dir}/lib" prefix="bin/lib"
                     includes="**"
                     excludes="${dist.excludes}"
                     />
            
            <!-- Source main and test files -->
            <zipfileset dir="${basedir}/src" prefix="src"
                     includes="**"
                     excludes="${dist.excludes}"
                     />
            
            <!-- Icons -->
            <zipfileset dir="${basedir}/icons" prefix="icons"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Examples files -->
            <zipfileset dir="${examples.dir}" prefix="examples"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Www + javadoc files -->
            <zipfileset dir="${www.dir}" prefix="www"
                     includes="**"
                     excludes="${dist.excludes}"
                     />

            <!-- Core Train files -->
            <zipfileset dir="${core.dir}" prefix="train/core"
			includes="**/*.xml"
			excludes="${dist.excludes}"
			/>

            <!-- Sheet Train files -->
            <zipfileset dir="${sheets.dir}" prefix="train/sheets"
			includes="**/*.xml"
			excludes="${dist.excludes}"
			/>

	</zip>
    </target>
    
    <!-- =============== -->
    <!--  - F O R M A T  -->
    <!-- =============== -->
    <target name="-format">
	<!--          description="Format Java source with Jalopy." -->
	<jalopy
	    convention="${dev.dir}/java-convention.xml"
	    history="file"
	    historymethod="adler32"
	    loglevel="info"
	    threads="1"
	    classpathref="build.classpath" >
	    <fileset dir="${src.dir}">
		<include name="**/*.java" />
		<exclude name="**/Shape.java"/>
		<exclude name="**/package-info.java"/>
	    </fileset>
	</jalopy>
    </target>
    
    <!-- ============================= -->
    <!--  - J A V A D O C - B U I L D  -->
    <!-- ============================= -->
    <target name="-javadoc-build">
        <!--         description="Generate project documentation." -->
        
<!--         <echo>DEBUG build-targets -javadoc-build</echo> -->

        <!-- Get rid of existing html files -->
        <!-- without deleting the directory (to keep CVS admin files) -->
        <mkdir dir="${dist.javadoc.dir}" />
        <delete verbose="${verbose}">
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </delete>

        <!-- Just in case these properties are not already set -->
        <property name="javadoc.additionalparam" value="" />
        <property name="javadoc.author"          value="true" />
        <property name="javadoc.noindex"         value="false" />
        <property name="javadoc.nonavbar"        value="false" />
        <property name="javadoc.notree"          value="false" />
        <property name="javadoc.private"         value="false" />
        <property name="javadoc.splitindex"      value="true" />
        <property name="javadoc.use"             value="true" />
        <property name="javadoc.version"         value="true" />
        <property name="javadoc.windowtitle"     value="" />
        
        <javadoc
            additionalparam ="${javadoc.additionalparam}"
            author          ="${javadoc.author}"
            bottom          ="${copyright.message}"
            destdir         ="${dist.javadoc.dir}"
            doctitle        ="${Name} ${spec.version} API"
            encoding        ="${build.encoding}"
            failonerror     ="true"
            noindex         ="${javadoc.noindex}"
            nonavbar        ="${javadoc.nonavbar}"
            notree          ="${javadoc.notree}"
            overview        ="${javadoc.overview}"
            package         ="yes"
            packagenames    ="${javadoc.packages}"
            private         ="${javadoc.private}"
            source          ="${javac.source}"
            sourcepath      ="${src.dir}"
            splitindex      ="${javadoc.splitindex}"
            use             ="${javadoc.use}"
            useexternalfile ="true"
            version         ="${javadoc.version}"
            windowtitle     ="${javadoc.windowtitle}"
            >
            
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>

            <!-- Which Java files to process -->
            <source file="${src.dir}/Audiveris.java"/>
            <packageset dir="${src.dir}" includes="*/**"/>

            <!-- Define a logical grouping of packages -->
             <group packages="omr:omr.sheet:omr.score:omr.score.visitor:omr.glyph:omr.step:omr.script"
                 title="Driving Packages"/>
             <group packages="omr.ui:omr.ui.*:omr.glyph.ui"
                 title="User interface Packages"/>
             <group packages="omr.graph:omr.lag*:omr.stick*"
                 title="Geometry Packages"/>
             <group packages="omr.check:omr.constant:omr.math:omr.selection:omr.util"
                 title="Utility Packages"/>
        </javadoc>

    </target>

    <!-- =========================== -->
    <!--  - P O S T - J A V A D O C  -->
    <!-- =========================== -->
    <target name="-post-javadoc">

        <!-- Remove time stamp in javadoc files, to ease CVS handling -->
        <echo message="Removing time stamps ..." />
	<!-- Get rid of Generated by javadoc (build 1.6.0) on Wed Jul 11 07:52:22 CEST 2007 -->
        <replaceregexp replace="-- Generated by javadoc --"
                       match="-- Generated by javadoc .*--" >
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </replaceregexp>

	<!-- Get rid of	<META NAME="date" CONTENT="2007-07-10"> -->
        <replaceregexp replace=""
                       match='&lt;META NAME="date" CONTENT=.*&gt;' >
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </replaceregexp>

        
        <!-- Slightly modify java CVS tag, so as not to be used as html CVS tag -->
        <!-- Nota: We cannot directly use a litteral regexp, since
             this very file is also handled by CVS, hence the dynamic
             value building of the regexp as property m.all !!!  -->
        <echo message="Trimming Java CVS tags ..." />
        <property name="m.dollar" value="\$"/>
        <property name="m.id" value="Id:"/>
        <property name="m.all" value="${m.dollar}${m.id} (.*) ${m.dollar}"/>
        <replaceregexp replace="\1"
                       match="${m.all}" >
            <fileset dir="${dist.javadoc.dir}" 
                     includes="**/*.html" 
                     />
        </replaceregexp>
        
    </target>

    <!-- ===================================== -->
    <!--  - P O S T - P O S T - J A V A D O C  -->
    <!-- ===================================== -->
    <target name="-post-post-javadoc">
        <!-- Copy all doc files where NetBeans expects them to be -->

        <mkdir dir="${nb.javadoc.dir}"/>
        
        <copy
            verbose="${verbose}"
            todir="${nb.javadoc.dir}">
            <fileset dir="${dist.javadoc.dir}"  
                     excludes="**/CVS/*"/>
        </copy>
        
    </target>

    <!-- ================= -->
    <!--  - P R E - J A R  -->
    <!-- ================= -->
    <target name="-pre-jar">

<!--         <echo>DEBUG build-targets -pre-jar</echo> -->

        <!-- Prepare a (half) manifest -->
        <tstamp/>
	<property name="manifest.file" value="manifest.mf" />
        <echo file="${manifest.file}" append="false">Manifest-Version: 1.0
Built-By: ${build.owner}
Specification-Title: ${spec.title}
Specification-Version: ${spec.version}
Implementation-Version: ${impl.version} ${DSTAMP}
</echo>
	<!-- Copy config files into a config folder in the classes dir -->
	<mkdir dir="${build.classes.dir}/config" />
        <copy
            verbose="${verbose}"
            todir="${build.classes.dir}/config">
            <fileset dir="${config.dir}"  
                     includes="*"/>
        </copy>

    </target>

    <!-- ===================== -->
    <!--  P R O P E R T I E S  -->
    <!-- ===================== -->
    <target name="properties"
        description="Print out all properties for the build file.">
        <echoproperties/>
    </target>
    
    <!-- =================== -->
    <!--  S C H E M A G E N  -->
    <!-- =================== -->
    <target name="schemagen"
	description="Generate some class binding, using JAXB." >
	<echo message="Generating schemas..." />
	<mkdir dir="${build.dir}/schemas" />
	<schemagen
	    destdir="${build.dir}/schemas">
	    <src path="${src.dir}" />
	    <include name="**/ScorePart.java"/>
	    <classpath refid="project.tools.classpath" />
	</schemagen>
    </target>
    
    <!-- ======= -->
    <!--  X J C  -->
    <!-- ======= -->
    <target name="xjc"
	description="Generate some Java classes, using JAXB." >
	<echo message="Generating Java classes ..." />
	<mkdir dir="${build.dir}/java" />
	<xjc schema="${build.dir}/schemas/partwise.xsd"
	     package="genpkg"
	     destdir="${build.dir}/java">
	    <produces dir="${build.dir}/java" includes="**/*.java" />
	    <classpath refid="project.tools.classpath" />
	</xjc>
    </target>

</project>
